var config={apiRoot:"http://t-avihavai.users.cs.helsinki.fi/cb-back/app/",editor:{configure:function(a){a.setReadOnly(!0),a.setPrintMarginColumn(!1),a.setDisplayIndentGuides(!1),a.getSession().setFoldStyle("markbeginend"),a.setTheme("ace/theme/github"),a.setFontSize(12),a.getSession().setTabSize(4),a.getSession().setUseWrapMode(!0),a.getSession().setWrapLimitRange(120,120)}}};$(document).ready(function(){codebrowser.initialize()});var codebrowser={app:{},models:{},collections:{},views:{},routers:{},initialize:function(){codebrowser.app.snapshot=new codebrowser.routers.SnapshotRouter,Backbone.history.start()}};codebrowser.models.Course=Backbone.RelationalModel.extend({urlRoot:config.apiRoot+"courses",relations:[{type:Backbone.HasMany,key:"exercises",relatedModel:"codebrowser.models.Exercise",collectionType:"codebrowser.collections.ExerciseCollection",reverseRelation:{key:"course"}}]}),codebrowser.models.Exercise=Backbone.RelationalModel.extend({urlRoot:function(){return this.get("course").urlRoot+"/"+this.get("course").id+"/exercises"}}),codebrowser.models.File=Backbone.RelationalModel.extend({urlRoot:function(){return config.apiRoot+"students/"+this.get("snapshot").get("studentId")+"/courses/"+this.get("snapshot").get("courseId")+"/exercises/"+this.get("snapshot").get("exerciseId")+"/snapshots/"+this.get("snapshot").id+"/files"},fetchContent:function(a){var b=$.get(this.urlRoot()+"/"+this.id+"/content",function(b){a(b,null)});b.fail(function(){a(null,b)})}}),codebrowser.models.Snapshot=Backbone.RelationalModel.extend({urlRoot:function(){if(!this.get("studentId")||!this.get("courseId")||!this.get("exerciseId"))throw new Error("Attributes studentId, courseId and exerciseId are required to fetch a snapshot.");return config.apiRoot+"students/"+this.get("studentId")+"/courses/"+this.get("courseId")+"/exercises/"+this.get("exerciseId")+"/snapshots"},relations:[{type:Backbone.HasMany,key:"files",relatedModel:"codebrowser.models.File",collectionType:"codebrowser.collections.FileCollection",reverseRelation:{key:"snapshot"}}]}),codebrowser.models.Student=Backbone.RelationalModel.extend({urlRoot:config.apiRoot+"students",relations:[{type:Backbone.HasMany,key:"courses",relatedModel:"codebrowser.models.Course",collectionType:"codebrowser.collections.CourseCollection"}]}),codebrowser.collections.CourseCollection=Backbone.Collection.extend({model:codebrowser.models.Course,url:config.apiRoot+"courses"}),codebrowser.collections.ExerciseCollection=Backbone.Collection.extend({model:codebrowser.models.Exercise,url:function(){return this.course.urlRoot+"/"+this.course.id+"/exercises"}}),codebrowser.collections.FileCollection=Backbone.Collection.extend({model:codebrowser.models.File,url:function(){return config.apiRoot+"students/"+this.snapshot.get("studentId")+"/courses/"+this.snapshot.get("courseId")+"/exercises/"+this.snapshot.get("exerciseId")+"/snapshots/"+this.snapshot.id+"/files"}}),codebrowser.collections.SnapshotCollection=Backbone.Collection.extend({model:codebrowser.models.Snapshot,url:function(){if(!this.studentId||!this.courseId||!this.exerciseId)throw new Error("Options studentId, courseId and exerciseId are required to fetch snapshots.");return config.apiRoot+"students/"+this.studentId+"/courses/"+this.courseId+"/exercises/"+this.exerciseId+"/snapshots"},initialize:function(a,b){b&&(this.studentId=b.studentId,this.courseId=b.courseId,this.exerciseId=b.exerciseId)}}),codebrowser.collections.StudentCollection=Backbone.Collection.extend({model:codebrowser.models.Student,url:config.apiRoot+"students"}),codebrowser.views.EditorView=Backbone.View.extend({initialize:function(){this.render()},render:function(){var a=$("#editor-template").html();$(this.el).html(a),this.editor=ace.edit("editor"),config.editor.configure(this.editor),this.editor.getSession().setMode("ace/mode/java")},setContent:function(a){this.editor.setValue(a),this.editor.navigateFileStart()}}),codebrowser.routers.SnapshotRouter=Backbone.Router.extend({routes:{"snapshots/:id":"read"},read:function(a){var b=codebrowser.models.Snapshot.findOrCreate({studentId:1,courseId:2,exerciseId:3,id:a});b.fetch({success:function(){console.log("Received snapshot from backend..."),console.log(b);var a=new codebrowser.views.EditorView({el:$("#container")});b.get("files").at(0).fetchContent(function(b){a.setContent(b),console.log("Done.")})},error:function(){console.log("Request failed.")}})}});